#
#The MIT License (MIT)
#
#Copyright (c) 2014, Groupon, Inc.
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in
#all copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#THE SOFTWARE.
#
parent_template: install_packages
environment:
  language: dockercompose
  language_versions: 1.1.0
  packages:
    - docker-1.5.0
  vars:
    DOCKER_REGISTRY: 'docker.registry'
    DOCKER_IMAGE: '<% out<< JOB_NAME.toLowerCase().replaceAll('-','_') %>'
    DOCKER_TAG: '<% if (DOTCI_PULL_REQUEST || DOTCI_BRANCH == "master") { %>latest<% } else { out<< DOTCI_BRANCH.replaceAll(/[^A-Za-z0-9]/,"").toLowerCase() } %>'
    DOCKER_SHA: '\${DOTCI_SHA:0:8}' # use SHA instead of TAG to be uniq and avoid concurrent builds hijacking each others tag for subsequent commits
    DOCKER_COMPOSE_MAIN: 'ci'
    DOCKER_COMPOSE_IMAGE: '<% out << BUILD_TAG.toLowerCase().replace('-','') %>_ci'

build:
  info:
    - docker --version
    - docker-compose --version
  before:
    - 'for file in `find . -type f -not -path "./.git/*"`; do touch -d "\$(git rev-list -n 1 HEAD \$file | xargs git show -s --format=%ai)" \$file; done'
  run:
    - "[ ! -f Dockerfile ] || awk '/^FROM /{system(\"docker pull \"\$2)}' Dockerfile"
    - "[ ! -f Dockerfile ] || docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_SHA} ."

    # Insure latest image dependencies are downloaded to avoid out-of-date local cache
    - docker-compose -p ${BUILD_TAG} pull

    # Finally block ensure all running process in container, then cleaned up
    - trap "docker-compose -p ${BUILD_TAG} kill; docker-compose -p ${BUILD_TAG} rm --force; exit" EXIT HUP INT QUIT PIPE TERM

    # Create the docker container for the current branch
    - docker-compose -p ${BUILD_TAG} build

    # re-tag docker-compose build to avoid repeated docker build
    #- docker tag ${DOCKER_COMPOSE_IMAGE}:latest ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOTCI_SHA}

    # This command will block until the tests are done
    - docker-compose -p ${BUILD_TAG} up

    # Console output the test result(s)
    - docker-compose -p ${BUILD_TAG} ps

    # Get the container id for the run of the previous command
    - DOCKER_CONTAINER=`docker-compose -p ${BUILD_TAG} ps -q ${DOCKER_COMPOSE_MAIN} | cut -c -12`

    # This is how we get the success of the build. If we can't find a docker container that looks like
    # the test run that has an exit code zero, this command will output a non-zero exit code.
    # EXIT_CODE is used on the last line to signal a passing build to CI.
    - docker ps -a --filter 'exited=0' | grep ${DOCKER_CONTAINER}; EXIT_CODE=\$?

    # Exit with the status code of the test suite
    - '[ ${EXIT_CODE} -eq 0 ] || exit ${EXIT_CODE}' # https://github.com/docker/fig/issues/683

    - "[ ! -f Dockerfile ] || docker tag -f ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_SHA} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
    - "[ ! -f Dockerfile ] || docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
